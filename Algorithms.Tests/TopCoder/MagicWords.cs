using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Algorithms.Tests
{
    [TestClass]
    public class MagicWords
    {
        private readonly Code.MagicWords _unit = new Code.MagicWords();

        /// <summary>
        /// {"CAD","ABRA","ABRA"}
        /// 1
        /// Returns: 6
        /// Every permutation generates a magic word here.
        /// </summary>
        [TestMethod]
        public void Test1()
        {
            var S = new[] { "CAD", "ABRA", "ABRA" };
            const int K = 1;
            var result = _unit.Count(S, K);
            Assert.IsTrue(result == 6);
        }

        /// <summary>
        /// {"AB","RAAB","RA"}
        /// 2
        /// Returns: 3
        /// The magic words are "ABRAABRA" and "RAABRAAB". 
        /// The first word is generated only by the permutation (0, 1, 2), 
        /// and the second word is generated by the two permutations (1, 2, 0) and (2, 0, 1).
        /// </summary>
        [TestMethod]
        public void Test2()
        {
            var S = new[] { "AB", "RAAB", "RA" };
            const int K = 2;
            var result = _unit.Count(S, K);
            Assert.IsTrue(result == 3);
        }

        /// <summary>
        /// {"AA","AA","AAA","A"}
        /// 1
        /// Returns: 0
        /// All permutations generate the string "AAAAAAAA" and it clearly is not a magic word 
        /// because all its cyclic shifts are the same as the original string.
        /// </summary>
        [TestMethod]
        public void Test3()
        {
            var S = new[] { "AA", "AA", "AAA", "A" };
            const int K = 1;
            var result = _unit.Count(S, K);
            Assert.IsTrue(result == 0);
        }

        /// <summary>
        /// {"AA","AA","AAA","A","AAA","AAAA"}
        /// 15
        /// Returns: 720
        /// </summary>
        [TestMethod]
        public void Test4()
        {
            var S = new[] { "AA", "AA", "AAA", "A", "AAA", "AAAA" };
            const int K = 15;
            var result = _unit.Count(S, K);
            Assert.IsTrue(result == 720);
        }

        /// <summary>
        /// {"ABC","AB","ABC","CA"}
        /// 3
        /// Returns: 0
        /// </summary>
        [TestMethod]
        public void Test5()
        {
            var S = new[] { "ABC", "AB", "ABC", "CA" };
            const int K = 3;
            var result = _unit.Count(S, K);
            Assert.IsTrue(result == 0);
        }

        /// <summary>
        /// {"A","B","C","A","B","C"}
        /// 1
        /// Returns: 672
        /// </summary>
        [TestMethod]
        public void Test6()
        {
            var S = new[] { "A", "B", "C", "A", "B", "C" };
            const int K = 1;
            var result = _unit.Count(S, K);
            Assert.IsTrue(result == 672);
        }

        /// <summary>
        /// {"AAAAAAAAAAAAAAAAAAAA",
        ///  "AAAAAAAAAAAAAAAAAAAA",
        ///  "AAAAAAAAAAAAAAAAAAAA",
        ///  "AAAAAAAAAAAAAAAAAAAA",
        ///  "AAAAAAAAAAAAAAAAAAAA",
        ///  "AAAAAAAAAAAAAAAAAAAA",
        ///  "AAAAAAAAAAAAAAAAAAAA",
        ///  "AAAAAAAAAAAAAAAAAAAB"}
        /// 1
        /// Returns: 40320
        /// </summary>
        [TestMethod]
        public void Test7()
        {
            var S = new[]
                {
                    "AAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAA",
                    "AAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAB"
                };
            const int K = 1;
            var result = _unit.Count(S, K);
            Assert.IsTrue(result == 40320);
        }
    }
}
