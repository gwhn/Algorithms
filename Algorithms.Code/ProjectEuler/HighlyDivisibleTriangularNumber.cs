using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Algorithms.Code.ProjectEuler
{
    /// <summary>
    /// The sequence of triangle numbers is generated by adding the natural numbers. 
    /// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
    /// The first ten terms would be:
    ///     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    /// Let us list the factors of the first seven triangle numbers:
    ///  1: 1
    ///  3: 1,3
    ///  6: 1,2,3,6
    /// 10: 1,2,5,10
    /// 15: 1,3,5,15
    /// 21: 1,3,7,21
    /// 28: 1,2,4,7,14,28
    /// We can see that 28 is the first triangle number to have over five divisors.
    /// What is the value of the first triangle number to have over five hundred divisors?
    /// </summary>
    public class HighlyDivisibleTriangularNumber
    {
        public long Solve(int n)
        {
            var number = 0L;
            var i = 1;
            do
            {
                number = TriangularNumber(i++);
            } while (Factors(number) < n);
            return number;
        }

        private static int Factors(long n)
        {
            var count = 1;
            if (n > 1)
            {
                count++;
            }
            var m = Math.Sqrt(n);
            for (int i = 2; i <= m; i++)
            {
                var mod = n%i;
                if (mod == 0 && i > m - 1e-10 && i < m + 1e-10)
                {
                    count++;
                }
                else if (mod == 0)
                {
                    count += 2;
                }
            }
            return count;
        }

        private static long TriangularNumber(int n)
        {
            var sum = 0;
            for (int i = 1; i <= n; i++)
            {
                sum += i;
            }
            return sum;
        }
    }
}
