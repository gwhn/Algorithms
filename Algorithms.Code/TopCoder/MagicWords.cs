using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Algorithms.Code
{
    /// <summary>
    /// Consider a string T containing exactly L characters. 
    /// The string T(i) is a cyclic shift of T starting from position i (0 &lt;= i &lt; L). 
    /// T(i) contains exactly the same number of characters as T. 
    /// For each j between 0 and L-1, inclusive, 
    /// character j of T(i) is equal to character (i+j)%L of T. 
    /// Let's call T a magic word if there are exactly K positions i such that T(i) = T.  
    /// You are given a String[] S containing exactly N words. 
    /// For each permutation p = (p[0], p[1], ..., p[N-1]) of integers between 0 and N-1, inclusive, 
    /// we can define a string generated by this permutation as a concatenation S[p[0]] + S[p[1]] + ... + S[p[N-1]]. 
    /// Return the number of permutations that generate magic words. 
    /// All indices in this problem are 0-based.
    /// 
    /// Constraints
    /// S will contain between 1 and 8 elements, inclusive.
    /// Each element of S will contain between 1 and 20 characters, inclusive.
    /// Each element of S will contain only uppercase letters ('A'-'Z').
    /// K will be between 1 and 200, inclusive.
    /// </summary>
    public class MagicWords
    {
        public int Count(String[] S, int K)
        {
            var n = S.Length;

            throw new NotImplementedException();
        }
    }
}
